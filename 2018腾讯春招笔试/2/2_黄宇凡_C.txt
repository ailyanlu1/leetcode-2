#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

typedef long long LL;

const int maxn = 105;
LL fac[maxn];
LL inv[maxn];
const LL mod = 1e9 + 7;

LL C(int n,int m){
	return 1LL * fac[n] * inv[m] % mod * inv[n - m] % mod;
}

LL qpow(LL a,LL n){
	LL ret = 1;
	while(n > 0){
		if(n & 1) ret = ret * a % mod;
		a = a * a % mod;
		n >>= 1;
	}
	return ret;
}

void init(){
	fac[0] = 1;
	for(int i = 1;i <= 100;i++){
		fac[i] = fac[i - 1] * i % mod;
	}
	inv[100] = qpow(fac[100],mod - 2);
	for(int i = 99;i >= 0;i--){
		inv[i] = inv[i + 1] * (i + 1) % mod;
	}
}

int main(){
	LL K,A,X,B,Y;
	init();
	while(cin >> K >> A >> X >> B >> Y){
		LL ans = 0;
		for(int i = 0;i <= X && A * i <= K;i++){
			int left = K - A * i;
			if(left % B) continue;
			int num = left / B;
			if(num > Y) continue;	
			ans = (ans + C(X,i) * C(Y,left / B) % mod) % mod;
		}
		cout << ans << endl;
	}
	return 0;
}
